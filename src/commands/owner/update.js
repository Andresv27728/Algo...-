
const { PREFIX } = require(`${BASE_DIR}/config`);
const { InvalidParameterError, DangerError } = require(`${BASE_DIR}/errors`);
const { exec } = require('child_process');
const { promisify } = require('util');

const execAsync = promisify(exec);

module.exports = {
  name: "update",
  description: "Actualiza el bot desde el repositorio remoto",
  commands: ["update", "actualizar"],
  usage: `${PREFIX}update`,
  handle: async ({
    sendSuccessReply,
    sendWarningReply,
    sendErrorReply,
    sendWaitReply,
  }) => {
    try {
      await sendWaitReply("üîÑ Iniciando actualizaci√≥n del bot...");

      // Verificar si hay cambios locales
      const { stdout: statusOutput } = await execAsync('git status --porcelain');
      
      if (statusOutput.trim()) {
        await sendWarningReply("‚ö†Ô∏è Hay cambios locales sin confirmar. Guardando cambios...");
        await execAsync('git stash');
      }

      // Actualizar desde el repositorio remoto
      await sendWaitReply("üì• Descargando actualizaciones...");
      const { stdout: pullOutput } = await execAsync('git pull origin main');

      // Si hab√≠a cambios guardados, intentar aplicarlos
      if (statusOutput.trim()) {
        try {
          await execAsync('git stash pop');
          await sendWarningReply("‚úÖ Cambios locales restaurados.");
        } catch (stashError) {
          await sendWarningReply("‚ö†Ô∏è Algunos cambios locales pueden requerir revisi√≥n manual.");
        }
      }

      // Instalar nuevas dependencias si hay cambios en package.json
      if (pullOutput.includes('package.json')) {
        await sendWaitReply("üì¶ Instalando nuevas dependencias...");
        await execAsync('npm install');
      }

      if (pullOutput.includes('Already up to date')) {
        await sendSuccessReply("‚úÖ El bot ya est√° actualizado a la √∫ltima versi√≥n.");
      } else {
        await sendSuccessReply(`‚úÖ Bot actualizado exitosamente!\n\nüìã Cambios:\n${pullOutput}`);
        
        // Opcional: reiniciar el bot (descomenta si lo deseas)
        // setTimeout(() => {
        //   process.exit(0);
        // }, 2000);
      }

    } catch (error) {
      console.error("Error durante la actualizaci√≥n:", error);
      await sendErrorReply(`‚ùå Error durante la actualizaci√≥n:\n${error.message}`);
    }
  },
};
